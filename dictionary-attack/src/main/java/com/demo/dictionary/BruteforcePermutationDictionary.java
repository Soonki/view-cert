package com.demo.dictionary;

import com.demo.entity.ChallengeEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Provides a list of words generated by permutation rules.
 */
@Component
public class BruteforcePermutationDictionary implements Dictionary {

    private int maxLen;
    private char[] allowedCharactersArray;
    private int[] indexArray;
    private int allowedCharacters;
    private int wordLen;

    @Autowired
    public BruteforcePermutationDictionary(
            @Value("${bruteforce-permutation-dictionary.min-len}") int minLen,
            @Value("${bruteforce-permutation-dictionary.max-len}") int maxLen,
            @Value("${bruteforce-permutation-dictionary.allowed-characters}") String allowedCharacters) {
        this.maxLen = maxLen;
        this.allowedCharactersArray = allowedCharacters.toCharArray();
        this.indexArray = new int[maxLen];
        this.allowedCharacters = allowedCharacters.length();
        this.wordLen = minLen;
        Arrays.fill(indexArray, 0);
        indexArray[wordLen - 1] = -1;
    }

    /**
     * Example:
     * With input parameters: minLen = 2, maxLen = 4, charset = "abc"
     * The iterator returns "aa", "ab", "ac", "ba", "bb", "bc", "ca", "cb", "cc", "aaa", "aab", ..., "zzzz"
     */
    @Override
    public Iterator<ChallengeEntity> iterator() {
        return new Iterator<ChallengeEntity>() {
            @Override
            public boolean hasNext() {
                if (allowedCharacters <= 0)
                    return false;
                if (wordLen < maxLen)
                    return true;
                return !areAllEqualTo(indexArray, allowedCharacters - 1);
            }

            @Override
            public ChallengeEntity next() {
                if (hasNext()) {
                    advance();
                    return new ChallengeEntity(concat());
                } else {
                    throw new NoSuchElementException();
                }
            }

            @Override
            public void remove() {
                // no use
            }
        };
    }

    private boolean areAllEqualTo(int[] array, int val) {
        for (Integer e : array)
            if (e != val)
                return false;
        return true;
    }

    private void advance() {
        for (int i = wordLen - 1; i >= 0; i--) {
            if (indexArray[i] < allowedCharacters - 1) {
                indexArray[i]++;
                break;
            } else {
                if (i > 0) {
                    if (indexArray[i - 1] < allowedCharacters - 1) {
                        indexArray[i] = 0;
                        indexArray[i - 1]++;
                        break;
                    }
                } else {
                    if (wordLen < maxLen) {
                        wordLen++;
                        Arrays.fill(indexArray, 0);
                        break;
                    }
                }
            }
        }
    }

    private String concat() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < wordLen; i++) {
            sb.append(allowedCharactersArray[indexArray[i]]);
        }
        return sb.toString();
    }
}
